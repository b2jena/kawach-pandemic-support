package com.stackroute.controller;

import com.stackroute.config.JWTTokenGenerator;
import com.stackroute.domain.User;
import com.stackroute.exception.UserNotFoundException;
import com.stackroute.service.UserService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.*;

/**
 * RestController annotation is used to create Restful web services using Spring MVC
 */
@RestController
@RequestMapping("/api/v1")
public class UserController {

    private UserService userService;
    private JWTTokenGenerator jwtTokenGenerator;
    ResponseEntity<?> responseEntity;

    @Autowired
    public UserController(UserService userService, JWTTokenGenerator jwtTokenGenerator) {
        this.userService = userService;
        this.jwtTokenGenerator = jwtTokenGenerator;
    }

    @Value("${app.controller.exception.message1}")
    private String message1;

    @Value("${app.controller.exception.message2}")
    private String message2;

    @Value("${app.controller.exception.message3}")
    private String message3;

    /*
    @PostMapping("register")
    public ResponseEntity<User> registerUser(@RequestBody User user){
        1. If id and password invalid, throw exception
        2. FindbyId() of mongorepository. If user already exists, throw exception.
        3. Else, store new user in db
    }
    */

    /*
    @PostMapping("login/user")
    public ResponseEntity<?> loginUser(@RequestBody User user) {
        try {
            if (user.getId() == null || user.getPassword() == null) {
                throw new UserNotFoundException(message1);
            }
            User userDetails = userService.findByIdAndPassword(user.getId(), user.getPassword());
            if (userDetails == null) {
                throw new UserNotFoundException(message2);
            }
            if (!(user.getPassword().equals(userDetails.getPassword()))) {
                throw new UserNotFoundException(message3);
            }
            /*
             * Create ResponseEntity with token generated by calling generateToken method of JwtTokenGenerator

            responseEntity= new ResponseEntity<>(jwtTokenGenerator.generateToken(userDetails),HttpStatus.OK);
        } catch (UserNotFoundException e) {
            responseEntity = new ResponseEntity<>(e.getMessage(), HttpStatus.CONFLICT);
        }
        return responseEntity;
    }*/

    @CrossOrigin(origins = "http://localhost:4200")
    @PostMapping("login/user")
    public ResponseEntity<?> loginUser(@RequestBody Map<String, String> json) {
        try {
            if (json.get("id") == null || json.get("password") == null) {
                throw new UserNotFoundException(message1);
            }
            User userDetails = userService.findByIdAndPassword(json.get("id"), json.get("password"));
            if (userDetails == null) {
                throw new UserNotFoundException(message2);
            }
            if (!(userDetails.getPassword().equals(userDetails.getPassword()))) {
                throw new UserNotFoundException(message3);
            }
            /*
             * Create ResponseEntity with token generated by calling generateToken method of JwtTokenGenerator
             */
            /*Map<String,String> response=new HashMap<>();
            response.put("Status","Success");
            response.put("Token", jwtTokenGenerator.generateToken(userDetails));
            response.put("Role",userDetails.getRole().toString());*/
            List<String> response=new ArrayList<String>();
            response.add("Success");
            response.add(jwtTokenGenerator.generateToken(userDetails));
            response.add(userDetails.getRole().toString());
            responseEntity = new ResponseEntity<>(response, HttpStatus.OK);
        } catch (UserNotFoundException e) {
            responseEntity = new ResponseEntity<>(e.getMessage(), HttpStatus.OK);
        }
        return responseEntity;
    }


}
